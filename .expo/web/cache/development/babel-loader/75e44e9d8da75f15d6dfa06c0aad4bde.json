{"ast":null,"code":"var _marked = _regeneratorRuntime.mark(processUser),\n    _marked2 = _regeneratorRuntime.mark(apiSaga);\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { takeLatest, takeEvery, delay, put, call } from \"redux-saga/effects\";\nimport { loginUserSuccess } from \"../actions/logInActions\";\nimport { fetchlogin } from \"../../api/api\";\nvar loginUrl = \"https://pl-super-kitchen-staging.herokuapp.com/api/v1/users/sessions\";\n\nfunction submitToServer(data) {\n  var response, responseJson;\n  return _regeneratorRuntime.async(function submitToServer$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(loginUrl, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            },\n            body: JSON.stringify(data)\n          }));\n\n        case 3:\n          response = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 6:\n          responseJson = _context.sent;\n          return _context.abrupt(\"return\", responseJson);\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 10]], Promise);\n}\n\nfunction processUser(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function processUser$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(submitToServer, {\n            user: {\n              email: action.payload.user,\n              password: action.payload.password\n            }\n          });\n\n        case 3:\n          result = _context2.sent;\n\n          if (!result.message) {\n            _context2.next = 10;\n            break;\n          }\n\n          console.log(\"error\");\n          _context2.next = 8;\n          return put(loginUserFailed(result.message));\n\n        case 8:\n          _context2.next = 12;\n          break;\n\n        case 10:\n          _context2.next = 12;\n          return put(loginUserSuccess(result.data));\n\n        case 12:\n          _context2.next = 17;\n          break;\n\n        case 14:\n          _context2.prev = 14;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked, null, [[0, 14]]);\n}\n\nexport default function apiSaga() {\n  return _regeneratorRuntime.wrap(function apiSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeEvery('USER_LOGIN', processUser);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}\n;","map":{"version":3,"sources":["/home/manuel/Desktop/2021-1-Grupo4-Movil/store/Sagas/api.js"],"names":["processUser","apiSaga","takeLatest","takeEvery","delay","put","call","loginUserSuccess","fetchlogin","loginUrl","submitToServer","data","fetch","method","headers","body","JSON","stringify","response","json","responseJson","console","error","action","user","email","payload","password","result","message","log","loginUserFailed"],"mappings":"uCA2BUA,W;wCAuBeC,O;;;AAlDzB,SAAQC,UAAR,EAAoBC,SAApB,EAA+BC,KAA/B,EAAsCC,GAAtC,EAA2CC,IAA3C,QAAsD,oBAAtD;AACA,SAAQC,gBAAR;AACA,SAAQC,UAAR;AAEA,IAAMC,QAAQ,GAAG,sEAAjB;;AAGA,SAAeC,cAAf,CAA8BC,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAE6BC,KAAK,CAACH,QAAD,EACtB;AACII,YAAAA,MAAM,EAAE,MADZ;AAEIC,YAAAA,OAAO,EAAC;AACJ,8BAAgB,kBADZ;AAEJ,wBAAU;AAFN,aAFZ;AAMIC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AANV,WADsB,CAFlC;;AAAA;AAEYO,UAAAA,QAFZ;AAAA;AAAA,2CAWiCA,QAAQ,CAACC,IAAT,EAXjC;;AAAA;AAWYC,UAAAA,YAXZ;AAAA,2CAYeA,YAZf;;AAAA;AAAA;AAAA;AAcQC,UAAAA,OAAO,CAACC,KAAR;;AAdR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,SAAUtB,WAAV,CAAsBuB,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMjB,IAAI,CAACI,cAAD,EAAiB;AACtCc,YAAAA,IAAI,EAAE;AACJC,cAAAA,KAAK,EAAEF,MAAM,CAACG,OAAP,CAAeF,IADlB;AAEJG,cAAAA,QAAQ,EAAEJ,MAAM,CAACG,OAAP,CAAeC;AAFrB;AADgC,WAAjB,CAAV;;AAFvB;AAEcC,UAAAA,MAFd;;AAAA,eAQYA,MAAM,CAACC,OARnB;AAAA;AAAA;AAAA;;AASYR,UAAAA,OAAO,CAACS,GAAR,CAAY,OAAZ;AATZ;AAUY,iBAAMzB,GAAG,CAAC0B,eAAe,CAACH,MAAM,CAACC,OAAR,CAAhB,CAAT;;AAVZ;AAAA;AAAA;;AAAA;AAAA;AAYY,iBAAMxB,GAAG,CAACE,gBAAgB,CAACqB,MAAM,CAACjB,IAAR,CAAjB,CAAT;;AAZZ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkBQU,UAAAA,OAAO,CAACC,KAAR;;AAlBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuBA,eAAe,SAAUrB,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAME,SAAS,CAAC,YAAD,EAAeH,WAAf,CAAf;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEd","sourcesContent":["import {takeLatest, takeEvery, delay, put, call} from \"redux-saga/effects\";\nimport {loginUserSuccess} from \"../actions/logInActions\"\nimport {fetchlogin} from \"../../api/api\"\n\nconst loginUrl = \"https://pl-super-kitchen-staging.herokuapp.com/api/v1/users/sessions\"\n\n\nasync function submitToServer(data) {\n    try {\n        let response = await fetch(loginUrl,\n            {\n                method: 'POST',\n                headers:{\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json' \n                },\n                body: JSON.stringify(data)\n            })\n        let responseJson = await response.json();\n        return responseJson;\n    } catch (error) {\n        console.error(error);\n        \n    }\n    \n}\n\nfunction* processUser(action) {\n    try {\n        const result = yield call(submitToServer, {\n            user: {\n              email: action.payload.user,\n              password: action.payload.password\n            }\n          })\n        if (result.message) {\n            console.log(\"error\");\n            yield put(loginUserFailed(result.message))  \n        } else {\n            yield put(loginUserSuccess(result.data))   \n        }\n        \n        \n        \n    } catch (error) {\n        console.error(error);\n    }\n}\n         \n\nexport default function *apiSaga(){\n    yield takeEvery('USER_LOGIN', processUser);\n};\n"]},"metadata":{},"sourceType":"module"}